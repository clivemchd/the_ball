{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","init","canvas","document","getElementById","engine","Engine","preserveDrawingBuffer","stencil","scene","Scene","camera","UniversalCamera","Vector3","setTarget","Zero","attachControl","HemisphericLight","Mesh","CreateSphere","FRONTSIDE","position","y","CreateGround","createScene","runRenderLoop","render","react_default","a","createElement","className","id","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8KCyEzBC,2BA3Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,KAAO,WACL,IAAIC,EAASC,SAASC,eAAe,gBACjCC,EAAS,IAAIC,SAAOJ,GAAQ,EAAM,CACpCK,uBAAuB,EACvBC,SAAS,IA+BPC,EA7Bc,WAChB,IAAIA,EAAQ,IAAIC,QAAML,GAClBM,EAAS,IAAIC,kBACf,UACA,IAAIC,UAAQ,EAAG,GAAI,IACnBJ,GAEFE,EAAOG,UAAUD,UAAQE,QACzBJ,EAAOK,cAAcd,GAAQ,GACjB,IAAIe,mBAAiB,SAAU,IAAIJ,UAAQ,EAAG,EAAG,GAAIJ,GACpD,IAAIS,OAAKC,aACpB,UACA,GACA,EACAV,GACA,EACAS,OAAKE,WAEAC,SAASC,EAAI,EACP,IAAIJ,OAAKK,aACpB,UACA,IACA,IACA,IACAd,GACA,GAEF,OAAOA,EAEGe,GACZnB,EAAOoB,cAAc,WACnBhB,EAAMiB,YA1CShC,mFA+CjBG,KAAKI,wCAIL,OACE0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,GAAG,eAAeD,UAAU,2BAtD1BE,cCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASZ,OAAOC,EAAAC,EAAAC,cAACU,EAAD,MAASpC,SAASC,eAAe,SD2H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9e28c880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\nimport {\n  Scene,\n  Engine,\n  UniversalCamera,\n  Vector3,\n  HemisphericLight,\n  Mesh,\n  Vector2,\n} from \"babylonjs\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // this.init();\n  }\n\n  init = () => {\n    let canvas = document.getElementById(\"renderCanvas\");\n    let engine = new Engine(canvas, true, {\n      preserveDrawingBuffer: true,\n      stencil: true,\n    });\n    let createScene = () => {\n      let scene = new Scene(engine);\n      let camera = new UniversalCamera(\n        \"camera1\",\n        new Vector3(0, 5, -10),\n        scene\n      );\n      camera.setTarget(Vector3.Zero());\n      camera.attachControl(canvas, false);\n      let light = new HemisphericLight(\"light1\", new Vector3(0, 1, 3), scene);\n      let sphere = new Mesh.CreateSphere(\n        \"sphere1\",\n        16,\n        2,\n        scene,\n        false,\n        Mesh.FRONTSIDE\n      );\n      sphere.position.y = 1;\n      let ground = new Mesh.CreateGround(\n        \"ground1\",\n        200,\n        100,\n        100,\n        scene,\n        false\n      );\n      return scene;\n    };\n    let scene = createScene();\n    engine.runRenderLoop(function () {\n      scene.render();\n    });\n  };\n\n  componentDidMount() {\n    this.init();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas id=\"renderCanvas\" className=\"theFirstCanvas\"></canvas>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}